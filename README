myoptParser README
==================

1 - Introduction
2 - Roadmap
3 - Building myoptParser 
4 - Installing myoptParser 
5 - Building both 32 and 64 bit versions


1 - Introduction
----------------
myoptParser is a library to parsing command line arguments.

2 - Roadmap
-----------

3 - Building myoptParser
------------------------
To build myoptParser use the following steps:

   1) Unzip and untar the distribution myoptparser-1.0.tar.gz source tarball:
   
      $ tar -xvf myoptparser-1.0.tar.gz
      $ cd myoptParser-x.y
 OR

   1) Use a git client to retrieve the source code anonymously from
      the project site. 

      $ git clone https://github.com/Vincenzo1968/myoptParser.git
      $ cd myoptParser
          
   2) Run the configure script to create myoptParser Makefiles. If the configure
      script fails... now you have a problem.
     
      $ ./configure --help          # (for available configuration options)
      $ ./configure [--with-option1][--with-the-other-option]

      NOTE: You may also run configure from a different directory in order to
      keep your distribution clean, e.g.:

      $ mkdir build
      $ chdir build
      $ ../configure [--with-option1][--with-the-other-option]
          
   3) Run the top level Makefile:
    
      $ make
          
4 - Installing myoptParser
--------------------------
To install myoptParser build the install target in the top level Makefile
    
      $ sudo make install
    
5 - Building both 32 and 64 bit versions
----------------------------------------
If you want to compile and install the library in both the 32 and 64-bit, you can proceed as follows:

   1) Unzip and untar the distribution myoptparser-1.0.tar.gz source tarball:
   
      $ tar -xvf myoptparser-1.0.tar.gz
      $ cd myoptParser-x.y
 OR

   1) Use a git client to retrieve the source code anonymously from
      the project site. 

      $ git clone https://github.com/Vincenzo1968/myoptParser.git
      $ cd myoptParser
      
   2) Create two directories, called, for example, "build32" and "build64" and starts configure and installation procedures within the newly created folders:

      $ mkdir build32
      $ cd build32
      $ ../configure CPPFLAGS="-m32" LDFLAGS="-m32" --libdir=/usr/local/lib
      $ make
      $ sudo make install

      $ cd ..

      $ mkdir build64
      $ cd build64
      $ ../configure CPPFLAGS="-m64" LDFLAGS="-m64" --libdir=/usr/local/lib64
      $ make
      $ sudo make install
      
   3) Now you can use the library to create programs in both the 32 and 64-bit:
   
      $ cd ..
      $ cd examples   

      $ gcc -Wall -W -O2 -m32 sample1.c -o sample32 -lmyoptParser
      $ gcc -Wall -W -O2 -m64 sample1.c -o sample64 -lmyoptParser

      $ ./sample32 --help
      $ ./sample64 --help
